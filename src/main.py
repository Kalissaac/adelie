import argparse
import os
import re
import tomlkit

from github_ex import GitRepo
from github_ex import GithubCredentials

from sources import make_source

def process(repo, software, config):
    regex = re.compile(software["regex"])
    content = repo.get_file(software["file"])
    current = next(iter(regex.findall(content)), None)

    if current == None:
        print("[Warning] Unable to find current version for", software["name"], "in", software["file"])
        return

    backend = make_source(software["type"], software["id"], software.get("filter"))
    backend.refresh_source()
    latest = backend.get_latest()

    if latest != current:
        branch_name = f"u-{software['name']}-{latest}"
        base_branch = software.get("branch", "master")

        for branch in list(repo.github.get_branches()):
            if branch.name == branch_name:
                print(f"[Info] Branch already exists for {software['name']}, no need to update.")
                return

        if config["settings"]["dry_run"]:
            verb = "would" if latest != current else "wouldn't"
            print("I", verb, "update", software["name"], "from", current, "to", latest)
            return

        print(f"[Info] Updating {software['name']} from {current} to {latest}.")
        content = regex.sub(latest, content)
        print("[Info] Creating new branch.")
        repo.modify_and_branch(base_branch, branch_name, f"automatically bump {software['name']} to {latest}", software["file"], content)
        print("[Info] Making pull request.")
        prtitle = f"[Automatic] Update {software['name']} from {current} to {latest}."
        changelog_url = software["changelog"].format(latest)
        prbody = f"""
This pull request was automatically generated. Be sure to test it before merging! :)
You can find a changelog at [this link]({changelog_url}).

If you choose to reject this PR, please do not delete the associated branch until the software is updated OR the next version is released.
That's how I keep track of the PRs I've already sent.

Origin note: This PR was generated by {config["settings"]["bot_name"]}.
You can get more information about this deployment at {config["settings"]["contact_info"]}.
"""
        repo.github.create_pull(title=prtitle, body=prbody, head=branch_name, base=base_branch)
    else:
        print(f"[Info] {software['name']} is already {latest}, no need to update.")

def main(config=None):
    parser = argparse.ArgumentParser(description='Automatically update git-ops deployments.')
    parser.add_argument('name', metavar='name', type=str, nargs='*',
                    help='names of software to update (default: update all software in config)')
    parser.add_argument('--config', dest='config_file', nargs='?', default="config.toml",
                    help='config file to use (default: config.toml)')
    args = parser.parse_args()


    with open(args.config_file, "r") as configfile:
        config = tomlkit.parse(configfile.read())
    if config == None or config == {}:
        raise Exception("Failed to read config file.")
    
    assert len(config["settings"]["bot_name"]) > 1
    assert len(config["settings"]["contact_info"]) > 1

    github_api_key = os.getenv('GITHUB_KEY', 'None')
    assert len(github_api_key) == 40
    gh_creds = GithubCredentials(token=github_api_key)

    print("Checking for updates", f"for {args.name}." if args.name else "for all deployments.")
    for repo in config["repo"]:
        gh = GitRepo(repo["github_id"], gh_creds)
        for software in repo["software"]:
            if (args.name and software["name"] in args.name) or (not args.name):
                process(gh, software, config)
    print("Update check complete.")

if __name__ == "__main__":
    main()
